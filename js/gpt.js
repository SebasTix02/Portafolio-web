// Referencias a los elementos del DOM
const sendButton = document.querySelector(".send");
const sendInput = document.querySelector(".send-input");
const messagesArea = document.querySelector(".messages-area");
const suggestionsArea = document.querySelector("#suggestions-area");
const snackbar = document.createElement("div"); // Snackbar din√°mico
const helpButton = document.getElementById("help-button");

// Agregar el snackbar al body
document.body.appendChild(snackbar);
snackbar.style.position = "fixed";
snackbar.style.bottom = "20px";
snackbar.style.left = "50%";
snackbar.style.transform = "translateX(-50%)";
snackbar.style.backgroundColor = "#333";
snackbar.style.color = "white";
snackbar.style.padding = "10px";
snackbar.style.borderRadius = "5px";
snackbar.style.display = "none"; // Inicialmente oculto

// Funci√≥n para mostrar el snackbar
function showSnackbar(message) {
    snackbar.textContent = message;
    snackbar.style.display = "block";
    setTimeout(() => {
        snackbar.style.display = "none";
    }, 3000); // Ocultar despu√©s de 3 segundos
}
// Funci√≥n para mostrar preguntas de manera interactiva
function showQuestions() {
    const message = responses["preguntas"] + suggestions.join("\n");
    addMessage(message, 'left'); // Agregar respuesta del bot
}
// Funci√≥n para guardar los mensajes en localStorage
function saveMessages(messages) {
    localStorage.setItem("chatMessages", JSON.stringify(messages));
}

// Funci√≥n para cargar los mensajes desde localStorage
function loadMessages() {
    const storedMessages = localStorage.getItem("chatMessages");
    const messages = storedMessages ? JSON.parse(storedMessages) : [];

    // Si no hay mensajes, agregar el mensaje predeterminado
    if (messages.length === 0) {
        messages.push({ text: "Hola, ¬øen qu√© puedo ayudarte? üòä", type: "left" });
    }

    return messages;
}

// Funci√≥n para mostrar los mensajes en el chat
function renderMessages(messages) {
    messagesArea.innerHTML = ''; // Limpiar los mensajes existentes
    messages.forEach((message) => {
        const messageBox = document.createElement("div");
        messageBox.classList.add("message-box", message.type);
        messageBox.innerHTML = message.text; // Usar innerHTML para que los links sean interpretados como clickeables
        messagesArea.appendChild(messageBox);
    });

    // Desplazar autom√°ticamente al final del contenedor de mensajes
    messagesArea.scrollTop = messagesArea.scrollHeight;
}

// Funci√≥n para agregar un mensaje al array y actualizar el localStorage
function addMessage(messageText, messageType) {
    const newMessage = { text: messageText, type: messageType };
    messages.push(newMessage);
    saveMessages(messages);
    renderMessages(messages);
}

// Sugerencias predefinidas
const suggestions = [
    "¬øqui√©n eres?",
    "¬øqui√©n te dise√±o?",
    "¬øqui√©n es sebasti√°n tixilema?",
    "¬øcu√°l es tu prop√≥sito?",
    "¬øqu√© tecnolog√≠as utilizas?",
    "¬øc√≥mo puedo interactuar contigo?",
    "¬øqu√© tipo de informaci√≥n puedes proporcionar?",
    "¬øqu√© limitaciones tienes?",
    "¬øc√≥mo manejas la privacidad de los usuarios?",
    "¬øpuedes aprender de las interacciones?",
    "dame m√°s informaci√≥n del curriculum de tu creador.",
    "dame m√°s informaci√≥n del portafolio de tu creador.",
    "dame informaci√≥n de contacto."
];

// Respuestas predefinidas
const responses = {
    "hola": "Hola, si tienes alguna pregunta escribe 'preguntas' o 'sugerencias'.",
    "preguntas": "Aqu√≠ tienes todas las preguntas que puedes hacer:",
    "sugerencias": "Aqu√≠ tienes algunas sugerencias que puedes hacer:",
    "¬øqui√©n eres?": "Soy un Bot b√°sico funcional en p√°ginas est√°ticas tales como esta.",
    "¬øqui√©n te dise√±o?": "Fui desarrollado por Sebasti√°n Tixilema, un estudiante de Software.",
    "¬øqui√©n es sebasti√°n tixilema?": "Es un estudiante de software en la Universidad T√©cnica de Ambato de 22 a√±os, apasionado por la programaci√≥n y la IA.",
    "¬øcu√°l es tu prop√≥sito?": "Mi prop√≥sito es asistir a los usuarios proporcionando informaci√≥n y respuestas r√°pidas y precisas.",
    "¬øqu√© tecnolog√≠as utilizas?": "Utilizo tecnolog√≠as como HTML, CSS y JavaScript para funcionar en p√°ginas est√°ticas.",
    "¬øc√≥mo puedo interactuar contigo?": "Puedes interactuar conmigo escribiendo preguntas y presionando enter.",
    "¬øqu√© tipo de informaci√≥n puedes proporcionar?": "Puedo proporcionar informaci√≥n sobre diversos temas, responder preguntas frecuentes y ayudar con tareas b√°sicas.",
    "¬øqu√© limitaciones tienes?": "Mis limitaciones incluyen la incapacidad de procesar solicitudes complejas o realizar tareas que requieren comprensi√≥n profunda.",
    "¬øc√≥mo manejas la privacidad de los usuarios?": "No almaceno ninguna informaci√≥n personal de los usuarios, garantizando as√≠ su privacidad.",
    "¬øpuedes aprender de las interacciones?": "No, actualmente no tengo la capacidad de aprender de las interacciones. Mis respuestas son predefinidas.",
    "dame m√°s informaci√≥n del curriculum de tu creador.": "Mi creador estudi√≥ Inform√°tica en el colegio y desde 2020 comenz√≥ a hacerlo en la universidad. M√°s informaci√≥n la puedes encontrar en el apartado de curriculum.",
    "dame m√°s informaci√≥n del portafolio de tu creador.": "Mi creador ha desarrollado varias aplicaciones tanto de escritorio como web y m√≥viles. Los repositorios los puedes encontrar en GitHub.",
    "dame informaci√≥n de contacto.": "Todos los contactos los encuentras en la parte inferior o en el apartado de Contactos del men√∫ principal."
};
helpButton.addEventListener('click', () => {
    const questionText = `${responses["preguntas"]}<br>${suggestions.map(suggestion => `<a href="#" class="suggestion-link">${suggestion}</a>`).join(" | ")}`;
    addMessage(questionText, 'left'); // Agregar respuesta del bot
});
// Funci√≥n para obtener una respuesta del bot
async function getBotResponse(userMessage) {
    const lowerMessage = userMessage.toLowerCase();
    
    // Si el usuario dice 'hola', responde con un mensaje espec√≠fico
    if (lowerMessage === "hola") {
        return responses["hola"];
    }

    // Si el usuario dice 'preguntas', mostrar todas las preguntas posibles
    if (lowerMessage === "preguntas") {
        return `${responses["preguntas"]}<br>${suggestions.map(suggestion => `<a href="#" class="suggestion-link">${suggestion}</a>`).join(" | ")}`;
    }

    // Si el usuario dice 'sugerencias', mostrar 3 sugerencias aleatorias
    if (lowerMessage === "sugerencias") {
        const randomSuggestions = getRandomSuggestions(3);
        return `${responses["sugerencias"]}<br>${randomSuggestions.map(suggestion => `<a href="#" class="suggestion-link">${suggestion}</a>`).join(" | ")}`;
    }

    // Si no hay respuesta predefinida, buscarla
    if (responses[lowerMessage]) {
        return responses[lowerMessage];
    }

    return "Lo siento, no entiendo esa pregunta. Por favor, intenta con 'preguntas'.";
}

// Funci√≥n para obtener N sugerencias aleatorias
function getRandomSuggestions(count) {
    const shuffledSuggestions = suggestions.sort(() => 0.5 - Math.random()); // Mezclar el array
    return shuffledSuggestions.slice(0, count); // Tomar las primeras 'count' sugerencias
}

// Funci√≥n para borrar el chat
function clearChat() {
    localStorage.removeItem("chatMessages");
    messages.length = 0; // Limpiar el array de mensajes
    messages.push({ text: "Hola, ¬øen qu√© puedo ayudarte? üòä", type: "left" });
    renderMessages(messages); // Volver a renderizar el chat vac√≠o
    sendInput.value = '';
}

// Enviar un nuevo mensaje
async function sendMessage(userMessage) {
    if (!userMessage) userMessage = sendInput.value.trim(); // Si no se pas√≥ un mensaje, tomarlo del input
    if (userMessage.toLowerCase() === "borrar chat") {
        clearChat();
    } else {
        if (userMessage !== '') {
            // Agregar el mensaje del usuario
            addMessage(userMessage, 'right');

            // Limpiar el input
            sendInput.value = '';

            // Obtener la respuesta del bot
            const botMessage = await getBotResponse(userMessage);

            // Agregar el mensaje del bot
            addMessage(botMessage, 'left');
        } else {
            // Mostrar el snackbar si el mensaje est√° vac√≠o
            showSnackbar("No se pueden enviar mensajes vac√≠os");
        }
    }
}

// Evento para enviar mensaje al hacer clic en el bot√≥n
sendButton.addEventListener('click', (event) => {
    event.preventDefault(); // Evita que se recargue la p√°gina al hacer clic en el bot√≥n
    sendMessage(); // Llama a la funci√≥n sin pasarle el evento
});

// Evento para enviar mensaje al presionar "Enter"
sendInput.addEventListener('keydown', function (event) {
    if (event.key === 'Enter') {
        event.preventDefault(); // Evita cualquier acci√≥n predeterminada
        sendMessage(); // Llama a la funci√≥n sin pasarle el evento
    }
});

// Evento para manejar los clics en las sugerencias
messagesArea.addEventListener('click', function (event) {
    if (event.target.classList.contains('suggestion-link')) {
        sendInput.value = event.target.textContent; // Completar el input con la sugerencia clickeada
    }
});
// Agregar la funcionalidad de clic a las sugerencias
document.querySelector(".messages-area").addEventListener('click', (event) => {
    if (event.target.classList.contains('suggestion-link')) {
        sendInput.value = event.target.textContent; // Establecer el texto de la sugerencia en el input
        sendMessage(); // Enviar el mensaje con la sugerencia seleccionada
    }
});

// Cargar los mensajes al cargar la p√°gina
const messages = loadMessages();
renderMessages(messages);
